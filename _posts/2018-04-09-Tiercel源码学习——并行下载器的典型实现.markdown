---
layout: post
title: Tiercel源码学习——并行下载器的典型实现
date: 2018-04-09
tags: 源码学习
categories: ios
---

## 总体框架
![UML](http://lc-cpc8kfpb.cn-n1.lcfile.com/13f7edb45657a9d9e4bf.png)

- Manger是核心类，是功能接口类，提供对外和对内的API，负责任务的管理（新增、开始、暂停、取消、状态维护、并发控制、查询）；session的管理（创建、reset、销毁）
- Cache负责缓存相关的工作，包括任务信息的缓存（1以pilist文件的形式保存执行中任务的元数据）、本地下载目录的维护
- DownLoadTask是执行下载任务的实体，维护下载任务相关的描述信息，进度、下载速度、起止时间、下载URL
- SessionDelegate实现了URLSessionDataDelegate、URLSessionTaskDelegate的委托协议，由manager管理，并持有manager，在协议的回调中，通过manager找到相应的task，调用task中处理回调的方法


## 细节学习
- Swift中命名空间的实现
    - [简书](https://www.jianshu.com/p/7808aacc0e42)
    - 代码说话,定义名为wy的命名空间；通过协议来划分命名空间，只有遵循协议的类才拥有该命名空间

```Swift

public final class WYKit<Base> {
    
    public let base: Base
    
    init(_ base: Base) {
        
        self.base = base
    }
}

// 定义命名空间的协议
public protocol WYKitCompatible {
    
    associatedtype CompatibleType
    
    var wy: CompatibleType { get }
}
// 扩展协议，给出命名空间变量的默认实现
extension WYKitCompatible {
    
    public var wy: WYKit<Self> {
        
        get {
            
            return WYKit(self)
        }
    }
}

// 扩展String实现命名空间wy
extension String: WYKitCompatible{ }

// String中命名空间wy下的函数
extension WYKit where Base == String {
    
    public func test() -> Base {
        
        return base + " test"
    }
}

```

- 创建DispatchQueue队列，将操作磁盘文件的操作，根据需求在队里中同步或者异步执行，提高性能
- 将重要Delegate（URLSessionDataDelegate、URLSessionTaskDelegate）的实现作为单独的类抽出来，使得代码直观简洁并且解耦
- 可以通过创建DispatchQueue，并且在Queue中同步的执行某些字段的读写操作，简单的实现互斥资源的同步访问的控制;串行队列通常用来set和get属性的值，避免race conditions
```Swift
    private let internalQueue = DispatchQueue(label:"com.XXX.internal")
    private var internalName: String = ""
    private var name: String {
        get {
            return internalQueue.sync { internalName }
        }
        set (newName) {
            internalQueue.sync { internalName = newName }
        }
    }   
```


