<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bigbro</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Feb 2018 14:04:39 +0800</pubDate>
    <lastBuildDate>Thu, 08 Feb 2018 14:04:39 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>CC02 《iOS核心动画高级技巧》读书笔记</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://zsisme.gitbooks.io/ios-/content/index.html&quot;&gt;《iOS核心动画高级技巧》&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Core Animation,实际上是从一个叫做Layer Kit的东西演变而来的，所以做动画支持CoreAnimation特性的冰山一角&lt;/li&gt;
  &lt;li&gt;Core Animation 是一个复合引擎，他的职责就是尽可能快地组合屏幕上不同的可视内容是被分解成独立的图层，存储在一个叫做图层树的体系之中。于是这个树性工程了UIKit以及在iOS应用中你所能在屏幕上看见的一切的基础&lt;/li&gt;
  &lt;li&gt;每一个UIView都有一个CALayer实例的图层属性，也就是所谓的Backing layer，视图的职责就是创建并管理这个图层，以确保当子视图在层级关系中添加或者被移除的时候，他们关联的图层也同样对应在层级关系树当中有相同的操作&lt;/li&gt;
  &lt;li&gt;==实际上这些背后关联的图层才是真正用来在屏幕上显示和做动画，UIView仅仅是对它的一个封装，提供一些iOS类似于处理触摸的具体功能，以及Core Animation 底层方法的高级接口==&lt;/li&gt;
  &lt;li&gt;寄宿图，CALayer有一个属性叫做Contents，这个属性被定义为id，以为着它可以是任何类型的对象。但是，在实践中给Contents赋值的如果不是CGImage，那么得到的图层将会是空白的。&lt;/li&gt;
  &lt;li&gt;UIView大多数的视觉操作相关的属性比如ContentMode，对这些属性的操作其实是对对应图层的操作；与contentMode相对应的CALayer的属性是contentsGravity&lt;/li&gt;
  &lt;li&gt;UIView的clipsBounds和CALayer的masksToBounds是相对应的&lt;/li&gt;
  &lt;li&gt;当图层显示在屏幕上的时候，CALayer不会主动的重绘她的内容。它把重绘的决定权交给了开发者&lt;/li&gt;
  &lt;li&gt;当使用寄宿了视图的图层的时候，通常做法是实现UIView的-drawRect:方法，UIView就会帮你做完剩下的工作，包括在需要重绘的时候调用-display方法。&lt;/li&gt;
  &lt;li&gt;视图的frame，bounds和center属性仅仅是存取方法，当操纵视图的frame，实际上是在改变位于视图下方CALayer的frame，不能够独立于图层之外改变视图的frame&lt;/li&gt;
  &lt;li&gt;对于视图或者图层来说，frame并不是一个非常清晰的属性，它其实是一个虚拟属性，是根据bounds，position和transform计算而来，所以当其中任何一个值发生改变，frame都会变化。相反，改变frame的值同样会影响到他们当中的值&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;记住当对图层做变换的时候，比如旋转或者缩放，frame实际上代表了覆盖在图层旋转之后的整个轴对齐的矩形区域，也就是说frame的宽高可能和bounds的宽高不再一致了
&lt;img src=&quot;https://zsisme.gitbooks.io/ios-/content/chapter3/3.2.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UIView的center，CAlayer的position，以及anchorPoint&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;anchorPoint默认为{0.5，0.5}，anchorPoint描述的是position的位置与视图哪个单位坐标点重合，从而确定center的位置，position不随着anchorPoint的改变而改变，而center就是“视图中心点”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;zPosition最实用的功能就是改变图层的显示顺序&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 08 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/iOS-CoreAnimation-Advance/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/iOS-CoreAnimation-Advance/</guid>
        
        <category>双百计划</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>CC01 深入理解RunLoop</title>
        <description>&lt;ul&gt;
  &lt;li&gt;RunLoop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 “接受消息-&amp;gt;等待-&amp;gt;处理” 的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回&lt;/li&gt;
  &lt;li&gt;OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。
CFRunLoopRef 是在 CoreFoundation 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。
NSRunLoop 是基于 CFRunLoopRef 的封装，提供了面向对象的 API，但是这些 API 不是线程安全的&lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#F03456&quot;&gt;线程和 RunLoop 之间是一一对应，而Runloop实际上是一个对象（CFRunLoopRef）。对象中由多个多种的Modes-ModelItems组成，一般Runloop有两种Mode，kCFRunLoopDefaultMode 和 UITrackingRunLoopMode。两种Mode独立并且互斥运行。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。滑动一个TableView时，RunLoop 会将 mode 切换为 TrackingRunLoopMode,这时kCFRunLoopDefaultMode中ModeItems就不会被相应&lt;/font&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.ibireme.com/wp-content/uploads/2015/05/RunLoop_0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer&lt;/strong&gt;。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CFRunLoopSourceRef&lt;/strong&gt; 是事件产生的地方。Source有两个版本：Source0 和 Source1。
    &lt;ul&gt;
      &lt;li&gt;Source0 只包含了一个回调（函数指针），它并不能主动触发事件。使用时，你需要先调用 CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。&lt;/li&gt;
      &lt;li&gt;Source1 包含了一个 mach_port 和一个回调（函数指针），被用于通过内核和其他线程相互发送消息。这种 Source 能主动唤醒 RunLoop 的线程，其原理在下面会讲到。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CFRunLoopTimerRef&lt;/strong&gt; 是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调（函数指针）。当其加入到 RunLoop 时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CFRunLoopObserverRef&lt;/strong&gt; 是观察者，每个 Observer 都包含了一个回调（函数指针），当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化&lt;/li&gt;
  &lt;li&gt;CFRunLoopMode 和 CFRunLoop 的结构&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;struct __CFRunLoopMode {
    CFStringRef _name;            // Mode Name, 例如 @&quot;kCFRunLoopDefaultMode&quot;
    CFMutableSetRef _sources0;    // Set
    CFMutableSetRef _sources1;    // Set
    CFMutableArrayRef _observers; // Array
    CFMutableArrayRef _timers;    // Array
    ...
};
 
struct __CFRunLoop {
    CFMutableSetRef _commonModes;     // Set
    CFMutableSetRef _commonModeItems; // Set&amp;lt;Source/Observer/Timer&amp;gt;
    CFRunLoopModeRef _currentMode;    // Current Runloop Mode
    CFMutableSetRef _modes;           // Set
    ...
};&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;RunLoop的内部逻辑
&lt;img src=&quot;https://blog.ibireme.com/wp-content/uploads/2015/05/RunLoop_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;苹果用-runloop-实现的功能&quot;&gt;苹果用 RunLoop 实现的功能&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;系统默认注册了5个Mode&lt;/strong&gt;:
    &lt;ol&gt;
      &lt;li&gt;kCFRunLoopDefaultMode: App的默认 Mode，通常主线程是在这个 Mode 下运行的。&lt;/li&gt;
      &lt;li&gt;UITrackingRunLoopMode: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响。&lt;/li&gt;
      &lt;li&gt;UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。&lt;/li&gt;
      &lt;li&gt;GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到。&lt;/li&gt;
      &lt;li&gt;kCFRunLoopCommonModes: 这是一个占位的 Mode，没有实际作用。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AutoreleasePool&lt;/strong&gt;
App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。
在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;界面更新&lt;/strong&gt; 
当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理，并被提交到一个全局的容器去。
苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：
_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()。这个函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 05 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RunLoop/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RunLoop/</guid>
        
        <category>双百计划</category>
        
        
        <category>ios</category>
        
      </item>
    
  </channel>
</rss>
